# src/app/settings.py
from __future__ import annotations
import os
from dataclasses import dataclass

def _get_bool(name: str, default: bool = False) -> bool:
    v = os.getenv(name)
    if v is None:
        return default
    return v.strip().lower() in {"1", "true", "yes", "on"}

@dataclass(frozen=True)
class Settings:
    aws_access_key_id: str
    aws_secret_access_key: str
    aws_region: str
    lwa_client_id: str
    lwa_client_secret: str
    lwa_refresh_token: str
    seller_id: str
    marketplace_id: str
    app_simulate: bool
    vat_rate: float = 0.23           # PT
    amazon_fee_rate: float = 0.15
    shipping_cost: float = 7.0
    surcharge: float = 0.0
    undercut_eur: float = 0.01

def load_settings() -> Settings:
    required = [
        "AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_REGION",
        "LWA_CLIENT_ID","LWA_CLIENT_SECRET","LWA_REFRESH_TOKEN",
        "SPAPI_SELLER_ID","SPAPI_MARKETPLACE_ID",
    ]
    missing = [k for k in required if not os.getenv(k)]
    if missing:
        raise RuntimeError(f"Vari√°veis em falta: {', '.join(missing)}")

    return Settings(
        aws_access_key_id=os.environ["AWS_ACCESS_KEY_ID"],
        aws_secret_access_key=os.environ["AWS_SECRET_ACCESS_KEY"],
        aws_region=os.environ["AWS_REGION"],
        lwa_client_id=os.environ["LWA_CLIENT_ID"],
        lwa_client_secret=os.environ["LWA_CLIENT_SECRET"],
        lwa_refresh_token=os.environ["LWA_REFRESH_TOKEN"],
        seller_id=os.environ["SELLER_ID"],
        marketplace_id=os.environ["SPAPI_MARKETPLACE_ID"],
        app_simulate=_get_bool("APP_SIMULATE", True),
    )

SETTINGS = load_settings()
